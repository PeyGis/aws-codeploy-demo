name: Scale Auto Scaling Group

on:
  workflow_dispatch:
    inputs:
      desired_capacity:
        required: true
        description: 'The desired capacity for the Auto Scaling Group'
        type: number
      port_context:
        required: true
        description: 'Action and general context (blueprint, entity, run id, etc...)'
        type: string

jobs:
  scale-autoscaling-group:
    runs-on: ubuntu-latest
    steps:
      - name: Inform Port of workflow start
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_context).runId}}
          logMessage: Configuring AWS credentials to scale Auto Scaling Group ${{ fromJson(inputs.port_context).entity.title }} to desired capacity ${{ toString(inputs.desired_capacity) }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate desired capacity
        run: |
          MIN_SIZE=${{ fromJson(inputs.port_context).entity.properties.minSize }}
          DESIRED_CAPACITY=${{ inputs.desired_capacity }}
          
          if [ "$DESIRED_CAPACITY" -lt "$MIN_SIZE" ]; then
            echo "‚ùå Desired capacity $DESIRED_CAPACITY cannot be lower than minimum size $MIN_SIZE"
            exit 1
          fi
          
          echo "‚úÖ Desired capacity $DESIRED_CAPACITY validation passed"

      - name: Scale Auto Scaling Group
        run: |
          MAX_SIZE=${{ fromJson(inputs.port_context).entity.properties.maxSize }}
          DESIRED_CAPACITY=${{ inputs.desired_capacity }}
          
          # If desired capacity exceeds max size, update both desired and max
          if [ "$DESIRED_CAPACITY" -gt "$MAX_SIZE" ]; then
            echo "üìà Desired capacity $DESIRED_CAPACITY exceeds max size $MAX_SIZE. Updating both values..."
            aws autoscaling update-auto-scaling-group \
              --auto-scaling-group-name ${{ fromJson(inputs.port_context).entity.title }} \
              --desired-capacity $DESIRED_CAPACITY \
              --max-size $DESIRED_CAPACITY
          else
            echo "üìä Updating desired capacity to $DESIRED_CAPACITY..."
            aws autoscaling update-auto-scaling-group \
              --auto-scaling-group-name ${{ fromJson(inputs.port_context).entity.title }} \
              --desired-capacity $DESIRED_CAPACITY
          fi

      - name: Inform Port about Auto Scaling Group scaling success
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).runId }}
          status: 'SUCCESS'
          logMessage: ‚úÖ Auto Scaling Group ${{ fromJson(inputs.port_context).entity.title }} scaled to desired capacity ${{ toString(inputs.desired_capacity) }} successfully
          summary: Auto Scaling Group scaling completed successfully

      - name: Inform Port about Auto Scaling Group scaling failure
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).runId }}
          status: 'FAILURE'
          logMessage: ‚ùå Failed to scale Auto Scaling Group ${{ fromJson(inputs.port_context).entity.title }} to desired capacity ${{ toString(inputs.desired_capacity) }}
          summary: Auto Scaling Group scaling failed
